#!/usr/bin/env python
import sys
sys.path.append('.')
import matplotlib
matplotlib.use('Agg')
from matplotlib.path import Path
from rtree import index as rtree
import numpy, shapefile, time
from datetime import datetime
lookup = {'216': ['Queens'], '217': ['Brooklyn'], '214': ['Staten Island'], '215': ['Queens'], '212': ['Bronx'], '213': ['Bronx'], '210': ['Brooklyn'], '211': ['Manhattan'], '165': ['Brooklyn'], '264': ['Unknown'], '265': ['Unknown'], '218': ['Queens'], '219': ['Queens'], '133': ['Brooklyn'], '132': ['Queens'], '131': ['Queens'], '130': ['Queens'], '137': ['Manhattan'], '136': ['Bronx'], '135': ['Queens'], '134': ['Queens'], '139': ['Queens'], '138': ['Queens'], '166': ['Manhattan'], '24': ['Manhattan'], '25': ['Brooklyn'], '26': ['Brooklyn'], '27': ['Queens'], '20': ['Bronx'], '21': ['Brooklyn'], '22': ['Brooklyn'], '23': ['Staten Island'], '160': ['Queens'], '28': ['Queens'], '29': ['Brooklyn'], '161': ['Manhattan'], '4': ['Manhattan'], '8': ['Queens'], '163': ['Manhattan'], '119': ['Bronx'], '258': ['Queens'], '120': ['Manhattan'], '121': ['Queens'], '122': ['Queens'], '123': ['Brooklyn'], '124': ['Queens'], '125': ['Manhattan'], '126': ['Bronx'], '127': ['Manhattan'], '128': ['Manhattan'], '129': ['Queens'], '167': ['Bronx'], '118': ['Staten Island'], '59': ['Bronx'], '58': ['Bronx'], '55': ['Brooklyn'], '54': ['Brooklyn'], '57': ['Queens'], '56': ['Queens'], '51': ['Bronx'], '50': ['Manhattan'], '53': ['Queens'], '52': ['Brooklyn'], '259': ['Bronx'], '164': ['Manhattan'], '201': ['Queens'], '199': ['Bronx'], '179': ['Queens'], '200': ['Bronx'], '195': ['Brooklyn'], '194': ['Manhattan'], '197': ['Queens'], '178': ['Brooklyn'], '191': ['Queens'], '190': ['Brooklyn'], '193': ['Queens'], '192': ['Queens'], '115': ['Staten Island'], '114': ['Manhattan'], '88': ['Manhattan'], '89': ['Brooklyn'], '111': ['Brooklyn'], '110': ['Staten Island'], '113': ['Manhattan'], '112': ['Brooklyn'], '82': ['Queens'], '83': ['Queens'], '80': ['Brooklyn'], '81': ['Bronx'], '86': ['Queens'], '87': ['Manhattan'], '84': ['Staten Island'], '85': ['Brooklyn'], '251': ['Staten Island'], '198': ['Queens'], '256': ['Brooklyn'], '206': ['Staten Island'], '226': ['Queens'], '257': ['Brooklyn'], '3': ['Bronx'], '177': ['Brooklyn'], '254': ['Bronx'], '7': ['Queens'], '247': ['Bronx'], '255': ['Brooklyn'], '225': ['Brooklyn'], '245': ['Staten Island'], '244': ['Manhattan'], '108': ['Brooklyn'], '109': ['Staten Island'], '241': ['Bronx'], '240': ['Bronx'], '243': ['Manhattan'], '242': ['Bronx'], '102': ['Queens'], '103': ['Manhattan'], '100': ['Manhattan'], '101': ['Queens'], '106': ['Brooklyn'], '107': ['Manhattan'], '104': ['Manhattan'], '105': ['Manhattan'], '39': ['Brooklyn'], '38': ['Queens'], '33': ['Brooklyn'], '32': ['Bronx'], '31': ['Bronx'], '30': ['Queens'], '37': ['Brooklyn'], '36': ['Brooklyn'], '35': ['Brooklyn'], '34': ['Brooklyn'], '246': ['Manhattan'], '73': ['Queens'], '252': ['Queens'], '205': ['Queens'], '223': ['Queens'], '176': ['Staten Island'], '60': ['Bronx'], '61': ['Brooklyn'], '62': ['Brooklyn'], '63': ['Brooklyn'], '64': ['Queens'], '65': ['Brooklyn'], '66': ['Brooklyn'], '67': ['Brooklyn'], '68': ['Manhattan'], '69': ['Bronx'], '175': ['Queens'], '174': ['Bronx'], '173': ['Queens'], '172': ['Staten Island'], '171': ['Queens'], '170': ['Manhattan'], '203': ['Queens'], '222': ['Brooklyn'], '181': ['Brooklyn'], '253': ['Queens'], '248': ['Bronx'], '182': ['Bronx'], '183': ['Bronx'], '180': ['Queens'], '2': ['Queens'], '162': ['Manhattan'], '187': ['Staten Island'], '184': ['Bronx'], '6': ['Staten Island'], '220': ['Bronx'], '186': ['Manhattan'], '188': ['Brooklyn'], '189': ['Brooklyn'], '202': ['Manhattan'], '196': ['Queens'], '221': ['Staten Island'], '185': ['Bronx'], '99': ['Staten Island'], '98': ['Queens'], '168': ['Bronx'], '169': ['Bronx'], '229': ['Manhattan'], '228': ['Brooklyn'], '91': ['Brooklyn'], '90': ['Manhattan'], '93': ['Queens'], '92': ['Queens'], '95': ['Queens'], '94': ['Bronx'], '97': ['Brooklyn'], '96': ['Queens'], '11': ['Brooklyn'], '10': ['Queens'], '13': ['Manhattan'], '12': ['Manhattan'], '15': ['Queens'], '14': ['Brooklyn'], '17': ['Brooklyn'], '16': ['Queens'], '19': ['Queens'], '18': ['Bronx'], '117': ['Queens'], '250': ['Bronx'], '116': ['Manhattan'], '204': ['Staten Island'], '151': ['Manhattan'], '150': ['Brooklyn'], '153': ['Manhattan'], '152': ['Manhattan'], '155': ['Brooklyn'], '154': ['Brooklyn'], '157': ['Queens'], '156': ['Staten Island'], '159': ['Bronx'], '158': ['Manhattan'], '234': ['Manhattan'], '238': ['Manhattan'], '239': ['Manhattan'], '207': ['Queens'], '235': ['Bronx'], '236': ['Manhattan'], '237': ['Manhattan'], '230': ['Manhattan'], '231': ['Manhattan'], '232': ['Manhattan'], '233': ['Manhattan'], '224': ['Manhattan'], '48': ['Manhattan'], '49': ['Brooklyn'], '46': ['Bronx'], '47': ['Bronx'], '44': ['Staten Island'], '45': ['Manhattan'], '42': ['Manhattan'], '43': ['Manhattan'], '40': ['Brooklyn'], '41': ['Manhattan'], '1': ['EWR'], '5': ['Staten Island'], '9': ['Queens'], '146': ['Queens'], '147': ['Bronx'], '144': ['Manhattan'], '145': ['Queens'], '142': ['Manhattan'], '143': ['Manhattan'], '140': ['Manhattan'], '141': ['Manhattan'], '209': ['Manhattan'], '208': ['Bronx'], '148': ['Manhattan'], '149': ['Brooklyn'], '77': ['Brooklyn'], '76': ['Brooklyn'], '75': ['Manhattan'], '74': ['Manhattan'], 'LocationID': ['Borough'], '72': ['Brooklyn'], '71': ['Brooklyn'], '70': ['Queens'], '79': ['Manhattan'], '78': ['Bronx'], '263': ['Manhattan'], '249': ['Manhattan'], '262': ['Manhattan'], '227': ['Brooklyn'], '261': ['Manhattan'], '260': ['Queens']}
coordinates = {'216': '-73.819023,40.6701035', '217': '-73.9534499,40.714622', '214': '-74.0962527,40.588438', '215': '-73.805677,40.6914852', '212': '-73.8302901,40.8318343', '213': '-73.8499208,40.8189076', '210': '-73.9456186,40.5826303', '211': '-73.9987504,40.72288', '165': '-73.9654888,40.6188823', '264': '140.6782378,-4.6643928', '265': '140.6782378,-4.6643928', '218': '-73.7465209,40.678159', '219': '-73.7465209,40.678159', '133': '-73.9706939,40.6462149', '132': '-73.7793732749,40.6429479', '131': '-73.805677,40.6914852', '130': '-73.805677,40.6914852', '137': '-73.9770831,40.7395463', '136': '-73.9006947,40.872319', '135': '-73.8314714,40.7144554', '134': '-73.8307419,40.7139415', '139': '-73.7518433,40.668518', '138': '-73.8730603793,40.77550135', '166': '-73.9624999,40.81', '24': '-73.967511,40.7958865', '25': '-73.9842045,40.6862248', '26': '-73.9968058,40.633993', '27': '-73.9244436247,40.55617965', '20': '-73.8863888,40.8552778', '21': '-73.9930817,40.6026115', '22': '-73.9930817,40.6026115', '160': '-73.8786751904,40.7182602', '28': '-73.8207222,40.7088957', '29': '-73.9595825,40.577883', '161': '-73.9672061,40.7472224', '4': '-73.9795832,40.7251022', '8': '-73.9230106743,40.7785469', '163': '-73.9670344,40.7474565', '119': '-73.9295955393,40.83653245', '258': '-73.857913,40.6892698', '120': '-73.9297058291,40.84606425', '121': '-73.7491229,40.77218', '122': '-73.7670771,40.7134361', '123': '-73.9571840869,40.60145275', '124': '-73.8362458,40.6578815', '125': '-73.9815197792,40.77310345', '126': '-73.8840246,40.8126008', '127': '-73.9268034,40.8656555', '128': '-73.9254269915,40.87227365', '129': '-73.8857754,40.7556561', '167': '-73.9065252,40.8292672', '118': '-74.1577777,40.5883333', '59': '-73.8938644116,40.8389019', '58': '-73.8197221,40.8391667', '55': '-73.9851449,40.575789', '54': '-74.0013382,40.6878498', '57': '-73.8601455,40.7469593', '56': '-73.8601455,40.7469593', '51': '-73.8294443,40.8738889', '50': '-73.9938889,40.7652778', '53': '-73.8459681,40.7876014', '52': '-73.9980555,40.6875', '259': '-73.8673572,40.898155', '164': '-73.9672061,40.7472224', '201': '-73.8361534,40.5805104', '199': '-73.8834936173,40.79193175', '179': '-73.9302672,40.7720145', '200': '-73.9063899,40.90056', '195': '-74.009584,40.6751032', '194': '-73.9220814,40.7967677', '197': '-73.8309671,40.6994253', '178': '-73.971185,40.6279672', '191': '-73.7360288931,40.71768175', '190': '-73.9710997424,40.66177525', '193': '-73.9449784413,40.75514545', '192': '-73.9518931502,40.75573455', '115': '-74.093475,40.6187152', '114': '-74.0029172,40.7284354', '88': '-74.0094,40.707', '89': '-73.9610686,40.6383929', '111': '-73.9910005804,40.65221185', '110': '-74.1262533,40.548161', '113': '-74.0029172,40.7284354', '112': '-73.9509713,40.7237134', '82': '-73.8783931,40.7365804', '83': '-73.9126369,40.723158', '80': '-73.9575485,40.7220528', '81': '-73.8281894,40.8884329', '86': '-73.7551325,40.6053825', '87': '-74.0094,40.707', '84': '-74.1656987,40.5453831', '85': '-73.9547079,40.649568', '251': '-74.1318093,40.621215', '198': '-73.9141666,40.7080556', '206': '-74.0801414,40.644548', '226': '-73.9354152,40.7398242', '257': '-73.9767081,40.6557273', '3': '-73.8333332,40.8505556', '177': '-73.971185,40.6279672', '254': '-73.8652777,40.8772222', '7': '-73.9302672,40.7720145', '247': '-73.8904094308,40.8742173', '225': '-73.9347884535,40.6821123', '245': '-74.1154339874,40.62578495', '244': '-73.9354148,40.8501001', '108': '-73.9651382,40.5976048', '109': '-74.1515317,40.5542718', '241': '-73.9006947,40.872319', '240': '-73.8828205,40.8977465', '243': '-73.9354148,40.8501001', '242': '-73.8637462,40.8484336', '102': '-73.8868027,40.7014917', '103': '-74.0182012233,40.6887692', '100': '-73.9936035,40.745587', '101': '-73.7115198,40.7470463', '106': '-73.988504,40.6791695', '107': '-73.9859249,40.7379303', '104': '-74.0182012233,40.6887692', '105': '-74.0451400251,40.68981905', '39': '-73.900692,40.643715', '38': '-73.7384652,40.6945474', '33': '-73.9950277391,40.69608485', '32': '-73.866524,40.8506558', '31': '-73.8759260447,40.85862575', '30': '-73.8204119,40.6031603', '37': '-73.9272269,40.694548', '36': '-73.9187481,40.6942696', '35': '-73.920137,40.6609369', '34': '-73.9699657735,40.70340235', '246': '-74.0014312318,40.7527363', '252': '-73.8184673,40.7945457', '205': '-73.760688,40.6984364', '223': '-73.9037476,40.7745459', '176': '-74.1159753,40.563994', '60': '-73.8929617,40.8366014', '61': '-73.9435661,40.667471', '62': '-73.9435661,40.667471', '63': '-73.8912473,40.6770477', '64': '-73.7470764,40.768713', '65': '-73.9862484,40.6921905', '66': '-73.9901166,40.7029052', '67': '-74.0095839,40.6214932', '68': '-74.0015282,40.7464906', '69': '-73.8904094308,40.8742173', '175': '-73.7659659,40.753991', '174': '-73.8792849,40.874997', '173': '-73.8601455,40.7469593', '172': '-74.1169817,40.5736223', '171': '-73.8130555,40.76', '170': '-73.9787499,40.7481574', '203': '-73.7357902,40.6658936', '222': '-73.8795559471,40.64785215', '181': '-73.9859722,40.6701033', '253': '-73.8456597,40.7546149', '248': '-73.8776355,40.8398226', '182': '-73.8604127,40.8389893', '183': '-73.8333332,40.8505556', '180': '-73.843746,40.67677', '2': '-73.8354123,40.6039936', '162': '-73.9802499716,40.7379838', '187': '-74.1365317,40.6331592', '184': '-73.8221732014,40.85413105', '6': '-74.0576367446,40.60076325', '220': '-73.9173587,40.8812107', '186': '-73.9928235,40.7502331', '188': '-73.9581409,40.647504', '189': '-73.9684724,40.6778708', '202': '-73.9502280671,40.7614177', '196': '-73.862214014,40.72293705', '221': '-74.077636,40.6264774', '185': '-73.8596359636,40.8575923', '99': '-74.179925445,40.5791894', '98': '-73.7934667,40.7348246', '168': '-73.9229146,40.8089897', '169': '-73.9060439,40.848397', '229': '-73.9601819,40.758037', '228': '-74.017564,40.6449634', '91': '-73.9348596,40.6212155', '90': '-73.9896297242,40.7410861', '93': '-73.8429365685,40.74052395', '92': '-73.817429,40.7654301', '95': '-73.8466131103,40.7232458', '94': '-73.8984693,40.8592667', '97': '-73.9758952,40.6869865', '96': '-73.8877401457,40.68755555', '11': '-74.0043059,40.6045491', '10': '-73.7826686859,40.68537625', '13': '-74.0169368,40.7110166', '12': '-74.015800674,40.70291705', '15': '-73.9206611,40.5615757', '14': '-74.014584,40.6339929', '17': '-73.9526616,40.6323159', '16': '-73.7770773,40.7684351', '19': '-73.7164151776,40.74424515', '18': '-73.8856911,40.8700999', '117': '-73.8104858,40.588488', '250': '-73.8501348,40.8273229', '116': '-73.9500617,40.8241451', '204': '-74.197644,40.5434385', '151': '-73.9597221,40.7902778', '150': '-73.9408424595,40.5766309', '153': '-73.9119787977,40.87470965', '152': '-73.9558332,40.8169444', '155': '-73.9068746,40.6032495', '154': '-73.8915612,40.5851073', '157': '-73.9126369,40.723158', '156': '-74.1587546,40.6367701', '159': '-73.9104142,40.824545', '158': '-73.9680457045,40.7962404', '234': '-73.990452814,40.7358375', '238': '-73.9754162,40.7870455', '239': '-73.9754162,40.7870455', '207': '-73.8989649617,40.7636168', '235': '-73.9093029,40.8601', '236': '-73.9587336,40.7735431', '237': '-73.9587336,40.7735431', '230': '-73.9855698,40.7579523', '231': '-74.0093062,40.7153802', '232': '-73.9892865199,40.7152812', '233': '-73.9702716,40.7533142', '224': '-73.9772504749,40.7348553', '48': '-73.9938889,40.7652778', '49': '-73.9652777,40.6897222', '46': '-73.7865273134,40.84715185', '47': '-73.9038696,40.8392908', '44': '-74.2373671,40.5367719', '45': '-73.9962503,40.7164913', '42': '-73.9525303,40.7982705', '43': '-73.9619003691,40.7874455', '40': '-73.994802,40.6784201', '41': '-73.9525303,40.7982705', '1': '-74.1772547504,40.68906405', '5': '-74.1964951049,40.5589568', '9': '-73.7956649,40.750236', '146': '-73.9374465,40.7493389', '147': '-73.8993028,40.8173229', '144': '-73.9982151,40.7192728', '145': '-66.162662,45.9342232', '142': '-73.9859524,40.7725238', '143': '-73.9859524,40.7725238', '140': '-73.9616612,40.7732745', '141': '-73.9616612,40.7732745', '209': '-74.0028375,40.7057752', '208': '-73.809578,40.8226008', '148': '-73.9868056,40.7159357', '149': '-83.4138977,30.4598068', '77': '-118.2018716,34.0412233', '76': '-73.8823582,40.6667702', '75': '-73.9424999,40.7947222', '74': '-73.9424999,40.7947222', '73': '-73.817429,40.7654301', '72': '-73.930415,40.6537148', '71': '-73.9534229,40.635817', '70': '-73.8651357,40.7612123', '79': '-73.9873612,40.7292688', '78': '-73.8909692,40.8453781', '263': '-73.9541666,40.7789173', '249': '-2.10184589778,52.5940167', '262': '-73.9541666,40.7789173', '227': '-74.0075319,40.644337', '261': '-74.0124387,40.7115025', '260': '-73.9054144,40.7453798','23': '-74.1781994,40.6126039', '256': '-73.9534499,40.714622', '255': '-73.9534499,40.714622'}
coordinates['249'] = '-73.9680457045,40.7962404'
coordinates['145'] = '-73.9484994,40.7455316'
class Point:
	def __init__(self,x,y):
		self.x = x
		self.y = y

class Polygon:
	def __init__(self,points):
		self.points = points
		self.nvert = len(points)
		global globalmaxx
		global globalminx
		global globalminy
		global globalmaxy
		minx = maxx = points[0].x
		miny = maxy = points[0].y
		for i in range(1,self.nvert):
			minx = min(minx,points[i].x)
			miny = min(miny,points[i].y)
			maxx = max(maxx,points[i].x)
			maxy = max(maxy,points[i].y)
		globalminx = minx
		globalminy=miny
		globalmaxx=maxx
		globalmaxy=maxy
		self.bound = (minx,miny,maxx,maxy)


	def contains(self,pt):
		firstX = self.points[0].x
		firstY = self.points[0].y
		testx = pt.x
		testy = pt.y
		c = False
		j = 0
		i = 1
		nvert = self.nvert
		while (i < nvert) :
			vi = self.points[i]
			vj = self.points[j]

			if(((vi.y > testy) != (vj.y > testy)) and (testx < (vj.x - vi.x) * (testy - vi.y) / (vj.y - vi.y) + vi.x)):
				c = not(c)

			if(vi.x == firstX and vi.y == firstY):
				i = i + 1
				if (i < nvert):
					vi = self.points[i];
					firstX = vi.x;
					firstY = vi.y;
			j = i
			i = i + 1
		return c

	def bounds(self):
		return self.bound
def findNeighborhood(location, index, neighborhoods):
        
        match = index.intersection((location[0], location[1], location[0], location[1]))
        for a in match:
                if any(map(lambda x: x.contains_point(location), neighborhoods[a][1])):
                        return a
        return -1

def readNeighborhood(shapeFilename, index, neighborhoods):
        sf = shapefile.Reader(shapeFilename)
        for sr in sf.shapeRecords():
                if sr.record[1] not in ['New York', 'Kings', 'Queens', 'Bronx', 'Richmond' ]: continue
                paths = map(Path, numpy.split(sr.shape.points, sr.shape.parts[1:]))
                bbox = paths[0].get_extents()
                map(bbox.update_from_path, paths[1:])
                index.insert(len(neighborhoods), list(bbox.get_points()[0])+list(bbox.get_points()[1]))
                neighborhoods.append((sr.record[2], paths))
        neighborhoods.append(('UNKNOWN', None))

def parseInput():
        for line in sys.stdin:
                line = line.strip()
                values = line.split(',')
                if values[0]=='"Date/Time"': continue
                if values[0]=="Dispatching_base_num": continue
                if values[0]=='VendorID':continue
                if values[0]=='vendor_id': continue
        
                if len(values)>1:
                        yield values

def mapper():
        
        index = rtree.Index()
        neighborhoods = []
        readNeighborhood('ZillowNeighborhoods-NY.shp', index, neighborhoods)
        poly = Polygon([Point(40.6188,-73.7712),Point(40.6233,-73.7674),Point(40.6248,-73.7681),Point(40.6281,-73.7681),Point(40.6356,-73.7472),Point(40.6422,-73.7468),Point(40.6469,-73.7534),
	Point(40.6460,-73.7544),Point(40.6589,-73.7745),Point(40.6628,-73.7858),Point(40.6634,-73.7891),Point(40.6655,-73.7903),Point(40.6658,-73.8021),Point(40.6632,-73.8146),Point(40.6638,-73.8210),Point(40.6621,-73.8244),Point(40.6546,-73.8248),
	Point(40.6469,-73.8212),Point(40.6302,-73.7848),Point(40.6223,-73.7899),Point(40.6203,-73.7831),Point(40.6274,-73.7782),Point(40.6235,-73.7731),Point(40.6193,-73.7738),Point(40.6188,-73.7712)])

        poly1 = Polygon([Point(40.7662,-73.8888),Point(40.7736,-73.8898),Point(40.7751,-73.8843),Point(40.7808,-73.8852),Point(40.7812,-73.8795),Point(40.7842,-73.8788),Point(40.7827,-73.8751),
	Point(40.7864,-73.8711),Point(40.788,-73.8673),Point(40.7832,-73.868),Point(40.7808,-73.8716),Point(40.773,-73.8534),Point(40.7697,-73.8557),Point(40.7673,-73.8505),Point(40.7645,-73.85),Point(40.7637,-73.8529),
        Point(40.7676,-73.856),Point(40.7659,-73.8594),Point(40.7654,-73.8625),Point(40.7693,-73.8672),Point(40.7714,-73.8732),Point(40.7697,-73.8871),Point(40.7665,-73.8866),Point(40.7662,-73.8888)])    
    
    
    # read taxi trip and fare data 
        for values in parseInput():
                pickup_neighborhood=-1        # default as first
                total = -1              # default as first
        
                if values[0].isalnum():
                        pickup_datetime = values[1]
                        locationid = values[3]
                        if locationid == '264' or locationid == '265' : continue
                        coordinate = coordinates[locationid].split(',')
                        pickup_longitude = float (coordinate[0])
                        pickup_latitude = float (coordinate[1])
                        pickup_time = datetime.strptime(pickup_datetime, '%Y-%m-%d %H:%M:%S').strftime('%Y-%m')
                        print("%s,%s,%0.3f,%0.3f,u\t%d" % (pickup_time,lookup[locationid][0],pickup_longitude,pickup_latitude,1))
                else: # uber_data
                        pickup_location = (float(values[2]), float(values[1]))
                        point1=Point(float('%.5f'%float(values[1])),float('%.5f'%float(values[2])))
                        pickup_longitude = float(values[2])
                        pickup_latitude = float(values[1])
                        pickup_neighborhood = findNeighborhood(pickup_location, index, neighborhoods)
                        pickup_datetime = values[0]
                        pickup_datetime = pickup_datetime[1:-1]
                        pickup_time = datetime.strptime(pickup_datetime, '%m/%d/%Y %H:%M:%S').strftime('%Y-%m')
                        if poly.contains(point1) or poly1.contains(point1):
                                print ("%s,Queens,%0.3f,%0.3f,u\t%d" % (pickup_time,pickup_longitude,pickup_latitude,1))
                                continue
                        if "Manhattan" in neighborhoods[pickup_neighborhood][0]:
                                print ("%s,Manhattan,%.3f,%.3f,u\t%d" % (pickup_time,pickup_longitude,pickup_latitude,1))
                        elif "Bronx" in neighborhoods[pickup_neighborhood][0]:
                                print ("%s,Bronx,%0.3f,%0.3f,u\t%d" % (pickup_time,pickup_longitude,pickup_latitude,1))
                        elif "Brooklyn" in neighborhoods[pickup_neighborhood][0]:
                                print ("%s,Brooklyn,%0.3f,%0.3f,u\t%d" % (pickup_time,pickup_longitude,pickup_latitude,1))
                        elif "Queens" in neighborhoods[pickup_neighborhood][0]:
                                print ("%s,Queens,%0.3f,%0.3f,u\t%d" % (pickup_time,pickup_longitude,pickup_latitude,1))
                        elif "Staten Island" in neighborhoods[pickup_neighborhood][0]:
                                print ("%s,Staten Island,%0.3f,%0.3f,u\t%d" % (pickup_time,pickup_longitude,pickup_latitude,1))

if __name__=='__main__':
        
        mapper()
